C51 COMPILER V9.52.0.0   OS_CPU                                                            11/28/2018 11:29:40 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE OS_CPU
OBJECT MODULE PLACED IN os_cpu.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE OS\os_cpu.c LARGE OPTIMIZE(6,SPEED) BROWSE INCDIR(.\OS;.\APP;.\USER;.\SYS;.
                    -\DRIVES) DEBUG OBJECTEXTEND PRINT(.\os_cpu.lst) TABS(2) OBJECT(os_cpu.obj)

line level    source

   1          #define _OS_CPU
   2          #include "includes.h"
   3          
   4          /*
   5          * --------------------------------------------------------------------------------------------------------
             -------------
   6          * ÃèÊö       :ÓÃÓÚÈÎÎñÕ»µÄ³õÊ¼»¯¡£³õÊ¼»¯ºóµÄÈÎÎñÕ» ¿´ÆğÀ´Ïñ¸Õ¸Õ·¢Éú¹ıÒ»´ÎÖĞ¶Ï²¢½«ËùÓĞµÄ¼Ä´æÆ÷¶¼±£´æ½øÁË¶ÑÕ
             -»µÄÇéĞÎÒ»Ñù¡£
   7          * ²ÎÊı       : task   ÈÎÎñ´úÂëµÄÖ¸Õë¡£
   8          *              parg   µ±ÈÎÎñ¿ªÊ¼Ö´ĞĞÊ±´«µİ¸øÈÎÎñµÄ²ÎÊıµÄÖ¸Õë¡£
   9          *              ptos   ·ÖÅä¸øÈÎÎñ¶ÑÕ»µÄÕ»¶¥Ö¸Õë¡£*
  10          * ·µ»ØÖµ   :  ·µ»ØÕ»¶¥Ö¸Õë
  11          * 
  12          * ×¢Òâ : ÈÎÎñÕ»½á¹¹Ê¾ÒâÍ¼(ÑîÒÙ)
  13          *
  14          *                                    ---------- -
  15          *                  ÓÃ»§Õ»×î¸ßµØÖ·---->|        | |
  16          *                                    ---------- |
  17          *                                    |   ...  |   ·ÂÕæ¶ÑÕ»¿Õ¼ä
  18          *----------                          ---------- | Ã¿ÈÎÎñÒ»¸ö
  19          *|OSTCBCur|               ?C_XBP---->|        | | KEIL×Ô¶¯´¦Àí
  20          *----------                          ---------- -
  21          *    |                               |¿ÕÏĞ¼ä¸ô|
  22          *    |     -----------------------   ----------                           ----------
  23          *    \---->|OSTCBCur->OSTCBStkPtr|   |?C_XBPµÍ|                    SP---->|        |
  24          *          -----------------------   ----------                           ----------
  25          *                     |              |?C_XBP¸ß|                           |        |
  26          *                     |              ---------- -                         ----------
  27          *                     |              |        | |                         |   .    |
  28          *                     |              ---------- |                         |   .    |
  29          *                     |              |        | |                         |   .    |
  30          *                     |              ---------- |                         ----------
  31          *                     |              |   .    |³¤¶È                       |        | +1
  32          *                     |              |   .    | |                         ----------
  33          *                     |              |   .    | |             OSStack---->|        | 0
  34          *                     |              ---------- |                         ----------
  35          *                     |              |        | |          OSStkStart---->| ²»¹ØĞÄ | -1  µÍµØÖ·
  36          *                     |              ---------- -                         ----------
  37          *                     \------------->|  ³¤¶È  | µÍµØÖ·                   ÏµÍ³Ó²¼ş¶ÑÕ»
  38          *                                    ----------
  39          *                                     ÓÃ»§¶ÑÕ»                        ³¤¶È=SP-OSStkStart
  40          * --------------------------------------------------------------------------------------------------------
             -------------
  41          */
  42          void *OSTaskStkInit(void(*task)(void *pd),void *ptos) REENTRANT
  43          {
  44   1        OS_STK *stk;
  45   1        
  46   1        stk   =(OS_STK *)ptos;      /* ÈÎÎñ¶ÑÕ»×îµÍÓĞĞ§µØÖ·             */
  47   1        *stk++=15;            /* ÈÎÎñ¶ÑÕ»³¤¶È                 */
  48   1        *stk++=(INT16U)task & 0xFF;   /* ÈÎÎñ´úÂëµØÖ·µÍ8Î»              */
  49   1        *stk++=(INT16U)task >> 8;   /* ÈÎÎñ´úÂëµØÖ·¸ß8Î»              */
  50   1        /* ´¦ÀíÆ÷ÊÇ°´ÌØ¶¨µÄË³Ğò½«¼Ä´æÆ÷´æÈë¶ÑÕ»µÄ£¬ËùÒÔÓÃ»§ÔÚ½«¼Ä´æÆ÷´æÈë¶ÑÕ»µÄÊ±ºòÒ²ÒªÒÀÕÕÕâÒ»Ë³Ğò */
  51   1        *stk++=0x00;          /* PSW                      */
C51 COMPILER V9.52.0.0   OS_CPU                                                            11/28/2018 11:29:40 PAGE 2   

  52   1        *stk++=0x0A;          /* ACC                      */
  53   1        *stk++=0x0B;          /* B                        */
  54   1        *stk++=0x00;          /* DPL                      */
  55   1        *stk++=0x00;          /* DPH                      */
  56   1        *stk++=0x00;          /* R0                       */
  57   1        *stk++=0x01;          /* R1                       */
  58   1        *stk++=0x02;          /* R2                       */
  59   1        *stk++=0x03;          /* R3                       */  
  60   1        *stk++=0x04;          /* R4                       */
  61   1        *stk++=0x05;          /* R5                       */
  62   1        *stk++=0x06;          /* R6                       */
  63   1        *stk++=0x07;          /* R7                       */
  64   1        /* ²»ÓÃ±£´æSP£¬ÈÎÎñÇĞ»»Ê±¸ù¾İÓÃ»§¶ÑÕ»³¤¶È¼ÆËãµÃ³ö                 */
  65   1        *stk++=(INT16U)(ptos+TASK_STK_SIZE) >> 8; /* ?C_XBP ·ÂÕæ¶ÑÕ»Ö¸Õë¸ß8Î»     */
  66   1        *stk++=(INT16U)(ptos+TASK_STK_SIZE) & 0xFF; /* ?C_XBP ·ÂÕæ¶ÑÕ»µÍ8Î»       */
  67   1        
  68   1        return ((void *)ptos);  /* ·µ»Ø×îµÍµØÖ·£¬ÕâÀï²»ÓÃµ¯³öÕ»¶¥Ö¸ÕëÊÇÎªÁËÌá¸ß¼ÆËãĞ§ÂÊ */
  69   1      }
  70          
  71          /*
  72          * -----------------------------------------------------------------
  73          *º¯Êı£ºinitTimer0  ¶¨Ê±Æ÷³õÊ¹»¯  10ms¶¨Ê±Æ÷
  74          *²ÎÊı£ºÎŞ  
  75          *·µ»ØÖµ£ºÎŞ
  76          * -----------------------------------------------------------------
  77          */
  78          void InitOSTick(void)  //¶¨Ê±10ms
  79          {   
  80   1       //³õÊ¼»¯¶¨Ê±Æ÷
  81   1          xTIMPRS |= 0x00;  //t0: MCLK/2 = 4M/2 = 2000000Hz
  82   1        TMOD |= 0x01; //t0: 16Î»¶¨Ê±Æ÷
  83   1        TH0 = 0xb1;//(65535 - 20000) / 256; 
  84   1        TL0 = 0xe0;//(65535 - 20000) % 256; //10ms => 0.01S * 2000000 = 20000 
  85   1        ET0=1; /* Âú×ãÔÚOSStart()Ç°²»²úÉúÊ±ÖÓÖĞ¶ÏµÄÒªÇó£¬ÏµÍ³Æô¶¯ºóµÚÒ»Ê±¼ä¿ª¶¨Ê±Æ÷T0ÖĞ¶Ï */  
  86   1        TR0=1; 
  87   1      }
  88          
  89          /*
  90          * ----------------------------------------------------------------
  91          * ÃèÊö: ¿ªÊ¼ÔËĞĞ
  92          * ----------------------------------------------------------------
  93          */
  94          void  OSStart (void)
  95          { 
  96   1         InitOSTick();  
  97   1         OSGetHighRdy();
  98   1         OSPrioCur     = OSPrioHighRdy; 
  99   1         OSTCBHighRdy  = &OSTCBTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 100   1         OSTCBCur      = OSTCBHighRdy;
 101   1         OSStartHighRdy();                            /* Execute target specific code to start task     */
 102   1      }
 103          
 104          /*
 105          * ---------------------------------------------------------------
 106          * º¯Êı£ºOSTaskCreate  ´´½¨ÈÎÎñ
 107          * ²ÎÊı£ºtask ÈÎÎñ´úÂëÖ¸Õë  pd  ¿ÉÑ¡Êı¾İÇøÓòµÄÖ¸Õë£¬¿ÉÓÃÓÚÔÚÈÎÎñµÚÒ»´ÎÖ´ĞĞÊ±½«²ÎÊı´«µİ¸øÈÎÎñ
 108          *       ptos ÊÇÖ¸ÏòÈÎÎñ¶ÑÕ»¶¥²¿µÄÖ¸Õë
 109          *       TaskID ÈÎÎñÓÅÏÈ¼¶
 110          * -----------------------------------------------------------------
 111          */
 112          
 113          void OSTaskCreate(void (*task)(void *pd), OS_STK *ptos, INT8U TaskID)
C51 COMPILER V9.52.0.0   OS_CPU                                                            11/28/2018 11:29:40 PAGE 3   

 114          {
 115   1        OS_ENTER_CRITICAL();
 116   1          if ((OSRdyTbl &(0x0001<<TaskID))  == 0) { /* ÈÎÎñÔÚ´ËÓÅÏÈ¼¶ÉÏ²»´æÔÚ Make sure task doesn't already exi
             -st at this priority  */
 117   2              OSSetPrioRdy(TaskID);                   /* ±£ÁôÓÅÏÈ¼¶                 */
 118   2              OSTaskStkInit(task,ptos);     /* ³õÊ¼»¯¶ÑÕ»   Initialize the task's stack         */                        
             -    
 119   2              OSTCBTbl[TaskID].OSTCBStkPtr = ptos;            /* ÈÎÎñ¿ØÖÆÆ÷´´½¨   */
 120   2              OSTCBTbl[TaskID].OSTCBDly = 0;
 121   2          }
 122   1          OS_EXIT_CRITICAL();
 123   1      }
 124          
 125          /*
 126          * ---------------------------------------------------------------------
 127          * ÃèÊö:     È·¶¨¾ÍĞ÷ÈÎÎñ£¬¸ßÓÅÏÈ¼¶ÈÎÎñ ÈÎÎñµ÷¶È
 128          * Notes      :ÔÚËø¶¨µ÷¶È³ÌĞòÊ±×èÖ¹ÖØĞÂµ÷¶È(Çë²ÎÔÄOS_SchedLock()
 129          * ---------------------------------------------------------------------
 130          */
 131          void  OS_Sched (void)
 132          {
 133   1          OS_ENTER_CRITICAL();
 134   1          OSGetHighRdy();
 135   1          
 136   1          if(OSPrioHighRdy != OSPrioCur)      /* Èç¹û²»ÊÇµ±Ç°ÔËĞĞµÄÈÎÎñ£¬½øĞĞÈÎÎñµ÷¶È */
 137   1          { 
 138   2              OSTCBCur    = &OSTCBTbl[OSPrioCur];
 139   2              OSTCBHighRdy = &OSTCBTbl[OSPrioHighRdy];
 140   2              OSPrioCur = OSPrioHighRdy;      
 141   2              OS_TASK_SW();                              /* ÈÎÎñµ÷¶È Perform a context switch                   
             -  */    
 142   2          }
 143   1          OS_EXIT_CRITICAL();
 144   1      }
 145          
 146          
 147          
 148          /*
 149          * ----------------------------------------------------------------
 150          * º¯Êı£ºOS_TaskIdle  ¿ÕÏĞÈÎÎñ±¾Ìå
 151          * ----------------------------------------------------------------
 152          */
 153          void OS_TaskIdle(void) 
 154          {
 155   1        for(;;){
 156   2          OS_ENTER_CRITICAL();
 157   2          IdleCount++;  
 158   2          OS_EXIT_CRITICAL();
 159   2        }
 160   1      }
 161          
 162          /*
 163          * ----------------------------------------------------------
 164          * º¯Êı£ºOSInit  ³õÊ¹»¯²Ù×÷ÏµÍ³
 165          * ----------------------------------------------------------
 166          */
 167          void OSInit(void)
 168          {                 
 169   1        OSTime        = 0;  
 170   1        IdleCount     = 0;
 171   1        OSRdyTbl      = 0;                    /* ³õÊ¹»¯¾ÍĞ÷±í                                   */
 172   1        OSPrioCur     = OS_TASKS;             /* µ±Ç°ÈÎÎñÓÅÏÈ¼¶                                 */
C51 COMPILER V9.52.0.0   OS_CPU                                                            11/28/2018 11:29:40 PAGE 4   

 173   1        OSPrioHighRdy = OS_TASKS;             /* µ±Ç°×î¸ßÓÅÏÈ¼¶                                 */  
 174   1        (void)OSTaskCreate(OS_TaskIdle,&OSTaskIdleStk[0],OS_TASKS); /* ¿ÕÏĞÈÎÎñ´´½¨                                   */  
 175   1      }
 176          
 177          /*
 178          * ------------------------------------------------------------
 179          * ÃèÊö:   µÎ´ğÖĞ¶Ï
 180          *        
 181          * ------------------------------------------------------------
 182          */
 183          void OSTimeTick() REENTRANT
 184          {   
 185   1        static INT8U i;
 186   1        OSTime++;
 187   1        for(i = 0; i < OS_TASKS; i++)     /* Ë¢ĞÂ¸÷ÈÎÎñÊ±ÖÓ */
 188   1        {
 189   2                    /* ±éÁĞÈÎÎñ¿ØÖÆÆ÷                            */
 190   2          OS_ENTER_CRITICAL();
 191   2          if (OSTCBTbl[i].OSTCBDly) {                     /* Èç¹û¸ÃÈÎÎñ½øÈëÑÓÊ±                        */
 192   3            if (--OSTCBTbl[i].OSTCBDly == 0) {               /* Èç¹û¸ÃÈÎÎñÑÓÊ±½áÊø                         */
 193   4                  OSSetPrioRdy(i);                       /* Ê¹ÈÎÎñ¿ÉÒÔÖØĞÂÔËĞĞ                         */ 
 194   4              }
 195   3          }
 196   2          OS_EXIT_CRITICAL();
 197   2        }   
 198   1      }
 199          /*
 200          * ----------------------------------------------------------------
 201          * ÃèÊö: Í¨ÖªÄÚºË½øÈëÖĞ¶Ï
 202          * ----------------------------------------------------------------
 203          */
 204          void  OSIntEnter (void) REENTRANT
 205          {
 206   1      }
 207          
 208          /*
 209          * ----------------------------------------------------------------------------------
 210          * ÃèÊö: Í¨ÖªÄÚºËÍË³öÖĞ¶Ï¡£/µ÷ÓÃµ÷¶È³ÌĞò£¬ÒÔÈ·¶¨Ò»¸öĞÂµÄ¡¢¸ßÓÅÏÈ¼¶µÄÈÎÎñÊÇ·ñÒÑ×¼±¸ºÃÔËĞĞ¡£
 211          * ----------------------------------------------------------------------------------
 212          */
 213          void  OSIntExit (void) REENTRANT
 214          {    
 215   1          
 216   1        OS_ENTER_CRITICAL();
 217   1        OSGetHighRdy();
 218   1        if (OSPrioHighRdy != OSPrioCur) {              /* Èç¹ûµ±Ç°ÈÎÎñ²»ÊÇ×î¸ßÈÎÎñ                   */
 219   2            OSTCBCur      = &OSTCBTbl[OSPrioCur];
 220   2            OSTCBHighRdy  = &OSTCBTbl[OSPrioHighRdy];
 221   2            OSPrioCur = OSPrioHighRdy;
 222   2            OSIntCtxSw();                              /* ÈÎÎñÇĞ»»                                   */
 223   2        } 
 224   1        OS_EXIT_CRITICAL();    
 225   1      }
 226          /*
 227          * -----------------------------------------------------------------------------
 228          * ÃèÊö:   ÑÓ³ÙÈÎÎñ  
 229          *
 230          * ²ÎÊı  :  ticks   µÎ´ğ ×î´ó65535
 231          *        
 232          * -----------------------------------------------------------------------------
 233          */
 234          void  OSDelayTick (INT16U ticks)
C51 COMPILER V9.52.0.0   OS_CPU                                                            11/28/2018 11:29:40 PAGE 5   

 235          {
 236   1        if (ticks > 0) 
 237   1        {                                                      /* 0 means no delay!         */
 238   2            OS_ENTER_CRITICAL();
 239   2            OSDelPrioRdy(OSPrioCur);                           /* ÑÓ³Ùµ±Ç°ÈÎÎñ              */
 240   2                
 241   2            OSTCBCur->OSTCBDly = ticks;                                       /* ÈÎÎñ¿ØÖÆ                  */
 242   2            OS_EXIT_CRITICAL();
 243   2            OS_Sched();                                                       /* Ìø×ªÈÎÎñ                 */
 244   2        }
 245   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1462    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    112       7
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =      8    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
